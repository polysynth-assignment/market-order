{"version":3,"sources":["logo.svg","components/Order.js","App.js","reducers/userProfileSlice.js","reducers/rootReducer.js","index.js","store.js"],"names":["Order","useState","formData","setformData","amountUSDP","amountETH","leverage","slippageTolerance","MainForm","submittedForm","validateSchema","Yup","shape","required","formik","useFormik","initialValues","usdpAutoCalc","ethAutoCalc","customSlippageTolerance","validationSchema","onSubmit","setSubmitting","setTimeout","values","isSubmitting","useEffect","setFieldValue","className","Grid","container","spacing","item","Typography","gutterBottom","sx","color","TextField","fullWidth","name","mt","variant","InputProps","endAdornment","helperText","type","onChange","e","handleChange","value","justifyContent","id","Slider","getAriaValueText","scale","min","step","max","marks","label","Button","onClick","borderRadius","width","height","placeholder","target","preventDefault","outline","border","disableUnderline","LoadingButton","disabled","loading","handleSubmit","Container","Card","backgroundColor","Box","p","data","console","log","Table","style","display","TableHead","TableRow","TableCell","TableBody","App","initialState","avatar","customToken","email","firstName","lastName","phoneNumber","token","_id","userProfileSlice","state","action","payload","combineReducers","ReactDOM","render","store","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById"],"mappings":"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","file":"static/js/main.a06dd53f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport {\n  Container,\n  Card,\n  Box,\n  InputAdornment,\n  TextField,\n  Slider,\n  Typography,\n  Grid,\n  Button,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"@mui/material\";\nimport * as Yup from \"yup\";\nimport { Field, Form, FormikProvider, useFormik } from \"formik\";\nimport { FaWallet } from \"react-icons/fa\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { Table } from \"reactstrap\";\n\nexport default function Order() {\n  const [formData, setformData] = useState({});\n  const { amountUSDP, amountETH, leverage, slippageTolerance } = formData;\n\n  const MainForm = ({ submittedForm }) => {\n    const initialValues = {\n      amountUSDP: \"\",\n      amountETH: \"\",\n      leverage: 1,\n      slippageTolerance: 0.5,\n      usdpAutoCalc: false,\n      ethAutoCalc: false,\n      customSlippageTolerance: \"\",\n    };\n    const validateSchema = Yup.object().shape({\n      amountUSDP: Yup.string().required(),\n      amountETH: Yup.string().required(),\n      leverage: Yup.string().required(),\n      slippageTolerance: Yup.string().required(),\n    });\n    const formik = useFormik({\n      initialValues: initialValues,\n      validationSchema: validateSchema,\n      onSubmit: () => {\n        formik.setSubmitting(true);\n        setTimeout(() => {\n          formik.setSubmitting(false);\n        }, 2000);\n        setformData(formik.values);\n        submittedForm(formik.values);\n      },\n    });\n    const { isSubmitting } = formik;\n\n    useEffect(() => {\n      if (formik.values.ethAutoCalc) {\n        formik.setFieldValue(\n          \"amountETH\",\n          (formik.values.amountUSDP * 1000) / formik.values.leverage\n        );\n      } else if (formik.values.usdpAutoCalc) {\n        formik.setFieldValue(\n          \"amountUSDP\",\n          (formik.values.amountETH * formik.values.leverage) / 1000\n        );\n      }\n    }, [formik.values.leverage]);\n\n    return (\n      <Fragment>\n        <div className=\"col-md-6 col-sm-12\">\n          <div className=\"form-group\">\n            <div>\n              <Grid container spacing={0}>\n                <Grid item>\n                  <Typography gutterBottom sx={{ color: \"#000\" }}>\n                    Amount\n                  </Typography>\n                </Grid>\n              </Grid>\n              <TextField\n                fullWidth\n                name=\"amountUSDP\"\n                sx={{ mt: -3 }}\n                variant=\"standard\"\n                InputProps={{\n                  endAdornment: <p>USDP</p>,\n                }}\n                helperText={\n                  <span>\n                    <FaWallet /> $ abcd\n                  </span>\n                }\n                type=\"number\"\n                onChange={(e) => {\n                  formik.handleChange(e);\n                  formik.setFieldValue(\"usdpAutoCalc\", false);\n                  formik.setFieldValue(\"ethAutoCalc\", true);\n                }}\n                value={formik.values.amountUSDP}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-6 col-sm-12\">\n          <div className=\"form-group\">\n            <div>\n              <Grid container spacing={0} sx={{ mt: 1 }}>\n                <Grid item>\n                  <Typography gutterBottom sx={{ color: \"#000\" }}>\n                    Amount\n                  </Typography>\n                </Grid>\n                <TextField\n                  fullWidth\n                  sx={{ mt: -3 }}\n                  name=\"amountETH\"\n                  variant=\"standard\"\n                  InputProps={{\n                    endAdornment: <p>ETH</p>,\n                  }}\n                  type=\"number\"\n                  onChange={(e) => {\n                    formik.handleChange(e);\n                    formik.setFieldValue(\"ethAutoCalc\", false);\n                    formik.setFieldValue(\"usdpAutoCalc\", true);\n                  }}\n                  value={formik.values.amountETH}\n                />\n              </Grid>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-6 col-sm-12\">\n          <div className=\"form-group\">\n            <div>\n              <Grid\n                container\n                spacing={2}\n                sx={{ justifyContent: \"space-between\", mt: 1 }}\n              >\n                <Grid item>\n                  <Typography\n                    id=\"non-linear-slider\"\n                    gutterBottom\n                    sx={{ color: \"#000\" }}\n                  >\n                    Leverage\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography\n                    id=\"non-linear-slider\"\n                    gutterBottom\n                    sx={{ color: \"#000\" }}\n                  >\n                    {`${formik.values.leverage}x`}\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Slider\n                name=\"leverage\"\n                onChange={formik.handleChange}\n                aria-label=\"Always visible\"\n                getAriaValueText={() => `${formik.values.leverage}x`}\n                value={formik.values.leverage}\n                scale={() => formik.values.leverage}\n                min={1}\n                step={1}\n                max={10}\n                marks={[\n                  {\n                    value: 1,\n                    label: \"1x\",\n                  },\n                  {\n                    value: 10,\n                    label: \"10x\",\n                  },\n                ]}\n                aria-labelledby=\"non-linear-slider\"\n              />\n              {/* <Slider\n                name=\"leverage\"\n                onChange={formik.handleChange}\n                value={formik.values.leverage}\n                min={1}\n                step={1}\n                max={10}\n                // scale={() => formik.values.leverage++}\n                getAriaValueText={() => `${formik.values.leverage}x`}\n                // valueLabelFormat={() => `${formik.values.leverage}x`}\n                valueLabelDisplay=\"auto\"\n                // aria-labelledby=\"non-linear-slider\"\n                marks={[\n                  {\n                    value: 1,\n                    label: \"1x\",\n                  },\n                  {\n                    value: 10,\n                    label: \"10x\",\n                  },\n                ]}\n              /> */}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-6 col-sm-12\">\n          <div className=\"form-group\">\n            <div>\n              <Grid\n                container\n                spacing={2}\n                sx={{ justifyContent: \"space-between\", mt: 0.5 }}\n              >\n                <Grid item>\n                  <Typography\n                    id=\"non-linear-slider\"\n                    gutterBottom\n                    sx={{ color: \"#000\" }}\n                  >\n                    Slippage Tolerance\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography\n                    id=\"non-linear-slider\"\n                    gutterBottom\n                    sx={{ color: \"#000\" }}\n                  >\n                    {`${formik.values.slippageTolerance}%`}\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Grid\n                container\n                spacing={0.2}\n                sx={{ justifyContent: \"space-between\" }}\n              >\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    name=\"slippageTolerance\"\n                    onClick={() => {\n                      formik.setFieldValue(\"slippageTolerance\", 0.1);\n                      formik.setFieldValue(\"customSlippageTolerance\", \"\");\n                    }}\n                    sx={{ borderRadius: \"20px\", color: \"#000\" }}\n                  >\n                    0.1%\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    name=\"slippageTolerance\"\n                    onClick={() => {\n                      formik.setFieldValue(\"slippageTolerance\", 0.5);\n                      formik.setFieldValue(\"customSlippageTolerance\", \"\");\n                    }}\n                    sx={{ borderRadius: \"20px\", color: \"#000\" }}\n                  >\n                    0.5%\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    name=\"slippageTolerance\"\n                    onClick={() => {\n                      formik.setFieldValue(\"slippageTolerance\", 1);\n                      formik.setFieldValue(\"customSlippageTolerance\", \"\");\n                    }}\n                    sx={{ borderRadius: \"20px\", color: \"#000\" }}\n                  >\n                    1%\n                  </Button>\n                </Grid>\n                <Grid item sx={{ width: \"34%\" }}>\n                  <Button\n                    variant=\"outlined\"\n                    sx={{ borderRadius: \"20px\", color: \"#000\", height: \"36px\" }}\n                  >\n                    <TextField\n                      variant=\"standard\"\n                      placeholder=\"Others\"\n                      name=\"slippageTolerance\"\n                      onChange={(e) => {\n                        if (e.target.value >= 1 && e.target.value <= 5) {\n                          e.preventDefault();\n                          formik.handleChange(e);\n                          formik.setFieldValue(\n                            \"customSlippageTolerance\",\n                            e.target.value\n                          );\n                        } else {\n                          e.preventDefault();\n                          formik.setFieldValue(\n                            \"slippageTolerance\",\n                            formik.values.slippageTolerance\n                          );\n                        }\n                      }}\n                      value={formik.values.customSlippageTolerance}\n                      sx={{ outline: \"none\", border: \"none\" }}\n                      InputProps={{\n                        endAdornment: <p>%</p>,\n                        disableUnderline: true,\n                      }}\n                    />\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-6 col-sm-12\">\n          <div className=\"form-group\">\n            <div>\n              <LoadingButton\n                fullWidth\n                disabled={\n                  formik.values.amountETH === \"\" ||\n                  formik.values.amountUSDP === \"\"\n                }\n                loading={isSubmitting}\n                variant=\"contained\"\n                sx={{ mt: 3 }}\n                onClick={formik.handleSubmit}\n              >\n                Place Market Order\n              </LoadingButton>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  };\n  const handleFormSubmit = (data) => {\n    console.log(\"submitted form\", data);\n    setformData(data);\n  };\n\n  return (\n    <Fragment>\n      <Container sx={{ width: \"fit-content\" }}>\n        <Card sx={{ mt: 4, backgroundColor: \"#84a1ff\", color: \"white\" }}>\n          <Box sx={{ p: 4, width: 350 }}>\n            <FormikProvider>\n              <MainForm submittedForm={handleFormSubmit} />\n            </FormikProvider>\n          </Box>\n        </Card>\n      </Container>\n      {formData && (\n        <Table style={{ display: \"inline\" }}>\n          <TableHead>\n            <TableRow>\n              <TableCell>AmountUSDP</TableCell>\n              <TableCell>AmountETH</TableCell>\n              <TableCell>Leverage</TableCell>\n              <TableCell>Slippage Tolerance</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            <TableRow>\n              <TableCell>{amountUSDP}</TableCell>\n              <TableCell>{amountETH}</TableCell>\n              <TableCell>{leverage}</TableCell>\n              <TableCell>{slippageTolerance}</TableCell>\n            </TableRow>\n          </TableBody>\n        </Table>\n      )}\n    </Fragment>\n  );\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport Order from './components/Order';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Order />\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\n  avatar: \"\",\n  customToken: \"\",\n  email: \"\",\n  firstName: \"\",\n  lastName: \"\",\n  phoneNumber: \"\",\n  token: \"\",\n  _id:\"\"\n};\n\nconst userProfileSlice = (state = initialState, action) => {\n  switch (action.type) {\n    case \"USER_LOGOUT\":\n      return {\n        ...initialState\n      };\n    case \"USER_EMAIL_VERIFIED\":\n      return {\n        ...state,\n        avatar: action.payload.avatar,\n        customToken: action.payload.customToken,\n        email: action.payload.email,\n        firstName: action.payload.firstName,\n        lastName: action.payload.lastName,\n        phoneNumber: action.payload.phoneNumber,\n        token: action.payload.token,\n        _id:action.payload._id\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userProfileSlice;\n","import { combineReducers } from 'redux';\nimport userProfileSlice from './userProfileSlice';\n\n// all redux slices are registered here and implemented/defined separately\nexport default combineReducers({\n    userProfileSlice\n});","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\nReactDOM.render(\n  <HelmetProvider>\n    <BrowserRouter>\n      <Provider store={configureStore()}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </HelmetProvider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nexport default function configureStore() {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    return createStore(\n        rootReducer,\n        composeEnhancers(applyMiddleware(thunk))\n    );\n}"],"sourceRoot":""}
{"version":3,"sources":["logo.svg","components/Order.js","App.js","index.js"],"names":["Order","useState","formData","setformData","showTable","setshowTable","amountUSDP","amountETH","leverage","slippageTolerance","validateSchema","Yup","shape","required","formik","useFormik","initialValues","usdpAutoCalc","ethAutoCalc","customSlippageTolerance","validationSchema","onSubmit","setSubmitting","setTimeout","values","isSubmitting","useEffect","setFieldValue","Container","sx","width","Card","mt","backgroundColor","color","Box","p","className","Grid","container","spacing","item","Typography","gutterBottom","TextField","fullWidth","name","variant","InputProps","endAdornment","helperText","type","onChange","e","handleChange","value","justifyContent","id","Slider","getAriaValueText","scale","min","step","max","marks","label","Button","onClick","borderRadius","height","placeholder","target","preventDefault","outline","border","disableUnderline","LoadingButton","disabled","loading","handleSubmit","Table","style","display","TableHead","TableRow","TableCell","TableBody","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7b916296.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Fragment, useState, useEffect } from \"react\";\nimport {\n  Container,\n  Card,\n  Box,\n  TextField,\n  Slider,\n  Typography,\n  Grid,\n  Button,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableBody,\n} from \"@mui/material\";\nimport * as Yup from \"yup\";\nimport { FormikProvider, useFormik } from \"formik\";\nimport { FaWallet } from \"react-icons/fa\";\nimport { LoadingButton } from \"@mui/lab\";\nimport { Table } from \"reactstrap\";\n\nexport default function Order() {\n  const [formData, setformData] = useState({});\n  const [showTable, setshowTable] = useState(false);\n  const { amountUSDP, amountETH, leverage, slippageTolerance } = formData;\n\n  const initialValues = {\n    amountUSDP: \"\",\n    amountETH: \"\",\n    leverage: 1,\n    slippageTolerance: 0.5,\n    usdpAutoCalc: false,\n    ethAutoCalc: false,\n    customSlippageTolerance: \"\",\n  };\n  const validateSchema = Yup.object().shape({\n    amountUSDP: Yup.string().required(),\n    amountETH: Yup.string().required(),\n    leverage: Yup.string().required(),\n    slippageTolerance: Yup.string().required(),\n  });\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: validateSchema,\n    onSubmit: () => {\n      formik.setSubmitting(true);\n      setTimeout(() => {\n        formik.setSubmitting(false);\n      }, 2000);\n      setshowTable(true);\n      setformData(formik.values);\n    },\n  });\n  const { isSubmitting } = formik;\n\n  useEffect(() => {\n    if (formik.values.ethAutoCalc) {\n      formik.setFieldValue(\n        \"amountETH\",\n        (formik.values.amountUSDP * 1000) / formik.values.leverage\n      );\n    } else if (formik.values.usdpAutoCalc) {\n      formik.setFieldValue(\n        \"amountUSDP\",\n        (formik.values.amountETH * formik.values.leverage) / 1000\n      );\n    }\n  }, [formik.values.leverage]);\n\n  return (\n    <Fragment>\n      <Container sx={{ width: \"fit-content\" }}>\n        <Card sx={{ mt: 4, backgroundColor: \"#84a1ff\", color: \"white\" }}>\n          <Box sx={{ p: 4, width: 350 }}>\n            <FormikProvider>\n              <div className=\"col-md-6 col-sm-12\">\n                <div className=\"form-group\">\n                  <div>\n                    <Grid container spacing={0}>\n                      <Grid item>\n                        <Typography gutterBottom sx={{ color: \"#000\" }}>\n                          Amount\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                    <TextField\n                      fullWidth\n                      name=\"amountUSDP\"\n                      sx={{ mt: -3 }}\n                      variant=\"standard\"\n                      InputProps={{\n                        endAdornment: <p>USDP</p>,\n                      }}\n                      helperText={\n                        <span>\n                          <FaWallet /> $ abcd\n                        </span>\n                      }\n                      type=\"number\"\n                      onChange={(e) => {\n                        formik.handleChange(e);\n                        formik.setFieldValue(\"usdpAutoCalc\", false);\n                        formik.setFieldValue(\"ethAutoCalc\", true);\n                      }}\n                      value={formik.values.amountUSDP}\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"col-md-6 col-sm-12\">\n                <div className=\"form-group\">\n                  <div>\n                    <Grid container spacing={0} sx={{ mt: 1 }}>\n                      <Grid item>\n                        <Typography gutterBottom sx={{ color: \"#000\" }}>\n                          Amount\n                        </Typography>\n                      </Grid>\n                      <TextField\n                        fullWidth\n                        sx={{ mt: -3 }}\n                        name=\"amountETH\"\n                        variant=\"standard\"\n                        InputProps={{\n                          endAdornment: <p>ETH</p>,\n                        }}\n                        type=\"number\"\n                        onChange={(e) => {\n                          formik.handleChange(e);\n                          formik.setFieldValue(\"ethAutoCalc\", false);\n                          formik.setFieldValue(\"usdpAutoCalc\", true);\n                        }}\n                        value={formik.values.amountETH}\n                      />\n                    </Grid>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"col-md-6 col-sm-12\">\n                <div className=\"form-group\">\n                  <div>\n                    <Grid\n                      container\n                      spacing={2}\n                      sx={{ justifyContent: \"space-between\", mt: 1 }}\n                    >\n                      <Grid item>\n                        <Typography\n                          id=\"non-linear-slider\"\n                          gutterBottom\n                          sx={{ color: \"#000\" }}\n                        >\n                          Leverage\n                        </Typography>\n                      </Grid>\n                      <Grid item>\n                        <Typography\n                          id=\"non-linear-slider\"\n                          gutterBottom\n                          sx={{ color: \"#000\" }}\n                        >\n                          {`${formik.values.leverage}x`}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                    <Slider\n                      name=\"leverage\"\n                      onChange={formik.handleChange}\n                      aria-label=\"Always visible\"\n                      getAriaValueText={() => `${formik.values.leverage}x`}\n                      value={formik.values.leverage}\n                      scale={() => formik.values.leverage}\n                      min={1}\n                      step={1}\n                      max={10}\n                      marks={[\n                        {\n                          value: 1,\n                          label: \"1x\",\n                        },\n                        {\n                          value: 10,\n                          label: \"10x\",\n                        },\n                      ]}\n                      aria-labelledby=\"non-linear-slider\"\n                    />\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"col-md-6 col-sm-12\">\n                <div className=\"form-group\">\n                  <div>\n                    <Grid\n                      container\n                      spacing={2}\n                      sx={{ justifyContent: \"space-between\", mt: 0.5 }}\n                    >\n                      <Grid item>\n                        <Typography\n                          id=\"non-linear-slider\"\n                          gutterBottom\n                          sx={{ color: \"#000\" }}\n                        >\n                          Slippage Tolerance\n                        </Typography>\n                      </Grid>\n                      <Grid item>\n                        <Typography\n                          id=\"non-linear-slider\"\n                          gutterBottom\n                          sx={{ color: \"#000\" }}\n                        >\n                          {`${formik.values.slippageTolerance}%`}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                    <Grid\n                      container\n                      spacing={0.2}\n                      sx={{ justifyContent: \"space-between\" }}\n                    >\n                      <Grid item>\n                        <Button\n                          variant=\"outlined\"\n                          name=\"slippageTolerance\"\n                          onClick={() => {\n                            formik.setFieldValue(\"slippageTolerance\", 0.1);\n                            formik.setFieldValue(\"customSlippageTolerance\", \"\");\n                          }}\n                          sx={{ borderRadius: \"20px\", color: \"#000\" }}\n                        >\n                          0.1%\n                        </Button>\n                      </Grid>\n                      <Grid item>\n                        <Button\n                          variant=\"outlined\"\n                          name=\"slippageTolerance\"\n                          onClick={() => {\n                            formik.setFieldValue(\"slippageTolerance\", 0.5);\n                            formik.setFieldValue(\"customSlippageTolerance\", \"\");\n                          }}\n                          sx={{ borderRadius: \"20px\", color: \"#000\" }}\n                        >\n                          0.5%\n                        </Button>\n                      </Grid>\n                      <Grid item>\n                        <Button\n                          variant=\"outlined\"\n                          name=\"slippageTolerance\"\n                          onClick={() => {\n                            formik.setFieldValue(\"slippageTolerance\", 1);\n                            formik.setFieldValue(\"customSlippageTolerance\", \"\");\n                          }}\n                          sx={{ borderRadius: \"20px\", color: \"#000\" }}\n                        >\n                          1%\n                        </Button>\n                      </Grid>\n                      <Grid item sx={{ width: \"34%\" }}>\n                        <Button\n                          variant=\"outlined\"\n                          sx={{\n                            borderRadius: \"20px\",\n                            color: \"#000\",\n                            height: \"36px\",\n                          }}\n                        >\n                          <TextField\n                            variant=\"standard\"\n                            placeholder=\"Others\"\n                            name=\"slippageTolerance\"\n                            onChange={(e) => {\n                              if (e.target.value >= 1 && e.target.value <= 5) {\n                                e.preventDefault();\n                                formik.handleChange(e);\n                                formik.setFieldValue(\n                                  \"customSlippageTolerance\",\n                                  e.target.value\n                                );\n                              } else {\n                                e.preventDefault();\n                                formik.setFieldValue(\n                                  \"slippageTolerance\",\n                                  formik.values.slippageTolerance\n                                );\n                              }\n                            }}\n                            value={formik.values.customSlippageTolerance}\n                            sx={{ outline: \"none\", border: \"none\" }}\n                            InputProps={{\n                              endAdornment: <p>%</p>,\n                              disableUnderline: true,\n                            }}\n                          />\n                        </Button>\n                      </Grid>\n                    </Grid>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"col-md-6 col-sm-12\">\n                <div className=\"form-group\">\n                  <div>\n                    <LoadingButton\n                      fullWidth\n                      disabled={\n                        formik.values.amountETH === \"\" ||\n                        formik.values.amountUSDP === \"\"\n                      }\n                      loading={isSubmitting}\n                      variant=\"contained\"\n                      sx={{ mt: 3 }}\n                      onClick={formik.handleSubmit}\n                    >\n                      Place Market Order\n                    </LoadingButton>\n                  </div>\n                </div>\n              </div>\n            </FormikProvider>\n          </Box>\n        </Card>\n      </Container>\n\n      {showTable && (<Table style={{ display: \"inline\" }}>\n        <TableHead>\n          <TableRow>\n            <TableCell>AmountUSDP</TableCell>\n            <TableCell>AmountETH</TableCell>\n            <TableCell>Leverage</TableCell>\n            <TableCell>Slippage Tolerance</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          <TableRow>\n            <TableCell>{amountUSDP}</TableCell>\n            <TableCell>{amountETH}</TableCell>\n            <TableCell>{leverage}</TableCell>\n            <TableCell>{slippageTolerance}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>)}\n    </Fragment>\n  );\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport Order from './components/Order';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Order />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}
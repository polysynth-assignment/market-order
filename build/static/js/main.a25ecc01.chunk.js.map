{"version":3,"sources":["logo.svg","components/Order.js","App.js","reducers/userProfileSlice.js","reducers/rootReducer.js","index.js","store.js"],"names":["Order","validateSchema","Yup","shape","amountUSDP","required","amountETH","leverage","slippageTolerance","formik","useFormik","initialValues","customSlippageTolerance","validationSchema","onSubmit","console","log","values","MainForm","className","Grid","container","spacing","item","Typography","gutterBottom","sx","color","TextField","fullWidth","name","mt","variant","InputProps","endAdornment","inputProps","inputMode","helperText","onChange","handleChange","value","justifyContent","id","Slider","getAriaValueText","scale","min","step","max","marks","label","Button","onClick","setFieldValue","borderRadius","width","height","placeholder","e","target","preventDefault","outline","border","disableUnderline","LoadingButton","handleSubmit","Container","Card","backgroundColor","Box","p","style","display","App","initialState","avatar","customToken","email","firstName","lastName","phoneNumber","token","_id","userProfileSlice","state","action","type","payload","combineReducers","ReactDOM","render","store","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","rootReducer","applyMiddleware","thunk","configureStore","document","getElementById"],"mappings":"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","file":"static/js/main.a25ecc01.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {\n  Fragment,\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n} from \"react\";\nimport {\n  Container,\n  Card,\n  Box,\n  InputAdornment,\n  TextField,\n  Slider,\n  Typography,\n  Grid,\n  Button,\n} from \"@mui/material\";\nimport * as Yup from \"yup\";\nimport { Field, Form, FormikProvider, useFormik } from \"formik\";\nimport { FaWallet } from \"react-icons/fa\";\nimport { alpha, styled } from \"@mui/material/styles\";\nimport { LoadingButton } from \"@mui/lab\";\n\nexport default function Order() {\n  const initialValues = {\n    amountUSDP: \"\",\n    amountETH: \"\",\n    leverage: 1,\n    slippageTolerance: 0.5,\n    customSlippageTolerance: \"\",\n  };\n  const validateSchema = Yup.object().shape({\n    amountUSDP: Yup.string().required(),\n    amountETH: Yup.string().required(),\n    leverage: Yup.string().required(),\n    slippageTolerance: Yup.string().required(),\n  });\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: validateSchema,\n    onSubmit: () => console.log(\"Submitted form\", formik.values),\n  });\n\n  const MainForm = () => {\n    return (\n      <Fragment>\n        <div className=\"col-md-6 col-sm-12\">\n          <div className=\"form-group\">\n            <div>\n              <Grid container spacing={0}>\n                <Grid item>\n                  <Typography\n                    gutterBottom\n                    sx={{ color: \"#000\" }}\n                  >\n                    Amount\n                  </Typography>\n                </Grid>\n              </Grid>\n              <TextField\n                fullWidth\n                name=\"amountUSDP\"\n                sx={{ mt: -3 }}\n                variant=\"standard\"\n                InputProps={{\n                  endAdornment: <p>USDP</p>,\n                }}\n                inputProps={{  inputMode: \"numeric\" }}\n                helperText={\n                  <span>\n                    <FaWallet /> $ abcd\n                  </span>\n                }\n                onChange={formik.handleChange}\n                value={formik.values.amountUSDP}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-6 col-sm-12\">\n          <div className=\"form-group\">\n            <div>\n              <Grid container spacing={0} sx={{ mt: 1 }}>\n                <Grid item>\n                  <Typography\n                    gutterBottom\n                    sx={{ color: \"#000\" }}\n                  >\n                    Amount\n                  </Typography>\n                </Grid>\n                <TextField\n                  fullWidth\n                  sx={{ mt: -3 }}\n                  name=\"amountETH\"\n                  variant=\"standard\"\n                  InputProps={{\n                    endAdornment: <p>ETH</p>,\n                  }}\n                  onChange={formik.handleChange}\n                  value={formik.values.amountETH}\n                />\n              </Grid>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-6 col-sm-12\">\n          <div className=\"form-group\">\n            <div>\n              <Grid\n                container\n                spacing={2}\n                sx={{ justifyContent: \"space-between\", mt: 1 }}\n              >\n                <Grid item>\n                  <Typography\n                    id=\"non-linear-slider\"\n                    gutterBottom\n                    sx={{ color: \"#000\" }}\n                  >\n                    Leverage\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography\n                    id=\"non-linear-slider\"\n                    gutterBottom\n                    sx={{ color: \"#000\" }}\n                  >\n                    {`${formik.values.leverage}x`}\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Slider\n                name=\"leverage\"\n                onChange={formik.handleChange}\n                aria-label=\"Always visible\"\n                getAriaValueText={() => `${formik.values.leverage}x`}\n                value={formik.values.leverage}\n                scale={() => formik.values.leverage}\n                min={1}\n                step={1}\n                max={10}\n                marks={[\n                  {\n                    value: 1,\n                    label: \"1x\",\n                  },\n                  {\n                    value: 10,\n                    label: \"10x\",\n                  },\n                ]}\n                aria-labelledby=\"non-linear-slider\"\n              />\n              {/* <Slider\n                name=\"leverage\"\n                onChange={formik.handleChange}\n                value={formik.values.leverage}\n                min={1}\n                step={1}\n                max={10}\n                // scale={() => formik.values.leverage++}\n                getAriaValueText={() => `${formik.values.leverage}x`}\n                // valueLabelFormat={() => `${formik.values.leverage}x`}\n                valueLabelDisplay=\"auto\"\n                // aria-labelledby=\"non-linear-slider\"\n                marks={[\n                  {\n                    value: 1,\n                    label: \"1x\",\n                  },\n                  {\n                    value: 10,\n                    label: \"10x\",\n                  },\n                ]}\n              /> */}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-6 col-sm-12\">\n          <div className=\"form-group\">\n            <div>\n              <Grid\n                container\n                spacing={2}\n                sx={{ justifyContent: \"space-between\", mt: 0.5 }}\n              >\n                <Grid item>\n                  <Typography\n                    id=\"non-linear-slider\"\n                    gutterBottom\n                    sx={{ color: \"#000\" }}\n                  >\n                    Slippage Tolerance\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography\n                    id=\"non-linear-slider\"\n                    gutterBottom\n                    sx={{ color: \"#000\" }}\n                  >\n                    {`${formik.values.slippageTolerance}%`}\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Grid\n                container\n                spacing={0.2}\n                sx={{ justifyContent: \"space-between\" }}\n              >\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    name=\"slippageTolerance\"\n                    onClick={() => {\n                      formik.setFieldValue(\"slippageTolerance\", 0.1);\n                      formik.setFieldValue(\"customSlippageTolerance\", \"\");\n                    }}\n                    sx={{ borderRadius: \"20px\", color: \"#000\" }}\n                  >\n                    0.1%\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    name=\"slippageTolerance\"\n                    onClick={() => {\n                      formik.setFieldValue(\"slippageTolerance\", 0.5);\n                      formik.setFieldValue(\"customSlippageTolerance\", \"\");\n                    }}\n                    sx={{ borderRadius: \"20px\", color: \"#000\" }}\n                  >\n                    0.5%\n                  </Button>\n                </Grid>\n                <Grid item>\n                  <Button\n                    variant=\"outlined\"\n                    name=\"slippageTolerance\"\n                    onClick={() => {\n                      formik.setFieldValue(\"slippageTolerance\", 1);\n                      formik.setFieldValue(\"customSlippageTolerance\", \"\");\n                    }}\n                    sx={{ borderRadius: \"20px\", color: \"#000\" }}\n                  >\n                    1%\n                  </Button>\n                </Grid>\n                <Grid item sx={{ width: \"34%\" }}>\n                  <Button\n                    variant=\"outlined\"\n                    sx={{ borderRadius: \"20px\", color: \"#000\", height: \"36px\" }}\n                  >\n                    <TextField\n                      variant=\"standard\"\n                      placeholder=\"Others\"\n                      name=\"slippageTolerance\"\n                      onChange={(e) => {\n                        if (e.target.value >= 1 && e.target.value <= 5) {\n                          e.preventDefault();\n                          formik.handleChange(e);\n                          formik.setFieldValue(\n                            \"customSlippageTolerance\",\n                            e.target.value\n                          );\n                        } else {\n                          e.preventDefault();\n                          formik.setFieldValue(\n                            \"slippageTolerance\",\n                            formik.values.slippageTolerance\n                          );\n                        }\n                      }}\n                      value={formik.values.customSlippageTolerance}\n                      sx={{ outline: \"none\", border: \"none\" }}\n                      InputProps={{\n                        endAdornment: <p>%</p>,\n                        disableUnderline: true,\n                      }}\n                      //   inputProps={{\n                      //     type: \"number\",\n                      //     min: 1,\n                      //     max: 5\n                      //   }}\n                    />\n                  </Button>\n                </Grid>\n              </Grid>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"col-md-6 col-sm-12\">\n          <div className=\"form-group\">\n            <div>\n              <LoadingButton\n                fullWidth\n                variant=\"contained\"\n                sx={{ mt: 3 }}\n                onClick={formik.handleSubmit}\n              >\n                Place Market Order\n              </LoadingButton>\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  };\n\n  return (\n    <Container sx={{ width: \"fit-content\" }}>\n      <Card sx={{ mt: 4, backgroundColor: \"#84a1ff\", color: \"white\" }}>\n        <Box sx={{ p: 4, width: 350 }}>\n          <FormikProvider value={formik}>\n            <Form\n              onSubmit={formik.handleSubmit}\n              style={{ display: \"contents\" }}\n            >\n              <MainForm />\n            </Form>\n          </FormikProvider>\n        </Box>\n      </Card>\n    </Container>\n  );\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport Order from './components/Order';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Order />\n    </div>\n  );\n}\n\nexport default App;\n","const initialState = {\n  avatar: \"\",\n  customToken: \"\",\n  email: \"\",\n  firstName: \"\",\n  lastName: \"\",\n  phoneNumber: \"\",\n  token: \"\",\n  _id:\"\"\n};\n\nconst userProfileSlice = (state = initialState, action) => {\n  switch (action.type) {\n    case \"USER_LOGOUT\":\n      return {\n        ...initialState\n      };\n    case \"USER_EMAIL_VERIFIED\":\n      return {\n        ...state,\n        avatar: action.payload.avatar,\n        customToken: action.payload.customToken,\n        email: action.payload.email,\n        firstName: action.payload.firstName,\n        lastName: action.payload.lastName,\n        phoneNumber: action.payload.phoneNumber,\n        token: action.payload.token,\n        _id:action.payload._id\n      };\n    default:\n      return state;\n  }\n};\n\nexport default userProfileSlice;\n","import { combineReducers } from 'redux';\nimport userProfileSlice from './userProfileSlice';\n\n// all redux slices are registered here and implemented/defined separately\nexport default combineReducers({\n    userProfileSlice\n});","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { Provider } from \"react-redux\";\nimport configureStore from \"./store\";\n\nReactDOM.render(\n  <HelmetProvider>\n    <BrowserRouter>\n      <Provider store={configureStore()}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </HelmetProvider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers/rootReducer';\nexport default function configureStore() {\n    const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n    return createStore(\n        rootReducer,\n        composeEnhancers(applyMiddleware(thunk))\n    );\n}"],"sourceRoot":""}